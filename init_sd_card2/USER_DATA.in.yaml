###############################################################################
####### WARNING: Be very careful when modifying the cloud-init payload. #######
####### Each and every character has been choosen with the utmost care. #######
####### We attempt to validate the userdata, but this is not foolproof. #######
###############################################################################

#cloud-config
# vim: syntax=yaml

# The currently used version of cloud-init is 0.7.9
# http://cloudinit.readthedocs.io/en/0.7.9/index.html

hostname: VARIABLE_TO_BE_SET_BY_PYTHON
manage_etc_hosts: true

users:
  - name: VARIABLE_TO_BE_SET_BY_PYTHON
    gecos: "Duckietown"
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    groups: users,docker,video
    plain_text_passwd: VARIABLE_TO_BE_SET_BY_PYTHON
    lock_passwd: false
    ssh_pwauth: true
    chpasswd: { expire: false }

package_upgrade: false

write_files:
  - content: |
      allow-hotplug wlan0
      iface wlan0 inet dhcp
    path: /etc/network/interfaces.d/wlan0
#  - encoding: b64
#    content: $DUCKIE_ART
#    path: /etc/update-motd.d/duckie.art
#  - content: |
#      #!/bin/sh
#      printf "\n\$(cat /etc/update-motd.d/duckie.art)\n"
#    path: /etc/update-motd.d/20-duckie
#    permissions: '0755'
#  - content: |
#      {
#          "dnsmasq_cfg": {
#             "address": "/#/192.168.27.1",
#             "dhcp_range": "192.168.27.100,192.168.27.150,1h",
#             "vendor_class": "set:device,IoT"
#          },
#          "host_apd_cfg": {
#             "ip": "192.168.27.1",
#             "ssid": "$DUCKSSID",
#             "wpa_passphrase": "$DUCKPASS",
#             "channel": "6"
#          },
#          "wpa_supplicant_cfg": {
#             "cfg_file": "/etc/wpa_supplicant/wpa_supplicant.conf"
#          }
#      }
#    path: /var/local/wificfg.json
#  - content: |
#      country=CA
#      ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
#      update_config=1
#      network={
#          ssid="$WIFISSID"
#          psk="$WIFIPASS"
#          key_mgmt=WPA-PSK
#      }
#    path: /etc/wpa_supplicant/wpa_supplicant.conf
  - content: |
      i2c-bcm2708
      i2c-dev
    path: /etc/modules
  - content: |
      [Unit]
      Description=Docker Socket for the API

      [Socket]
      ListenStream=2375
      BindIPv6Only=both
      Service=docker.service

      [Install]
      WantedBy=sockets.target
    path: /etc/systemd/system/docker-tcp.socket


# These commands will be run once on first boot only
runcmd:
  - 'systemctl restart avahi-daemon'
# Create /data directory for storing Duckiebot-local configuration files
  - 'mkdir /data && chown 1000:1000 /data'
# Change the date to use the date of the flashing machine

  # TODO: fix this
  # - 'date -s "$(date "+%Y-%m-%d %H:%M:%S")"'


# Copy all the hardware information (e.g. serial number) to /data/proc
  - 'mkdir /data/proc && cp /proc/*info /data/proc'

#   - [ modprobe, i2c-bcm2708 ]
#   - [ modprobe, i2c-dev ]
  - [ systemctl, stop, docker ]
  - [ systemctl, daemon-reload ]
  - [ systemctl, enable, docker-tcp.socket ]
  - [ systemctl, start, --no-block, docker-tcp.socket ]
  - [ systemctl, start, --no-block, docker ]

# Disabled pre-loading duckietown/software due to insuffient space on /var/local
# https://github.com/hypriot/image-builder-rpi/issues/244#issuecomment-390512469
#  - [ docker, load, "--input", "/var/local/software.tar.gz"]

# Portainer Web UI
  - [ docker, load, --input, "/var/local/portainer.tar.gz" ]
# Watchtower live updates
  - [ docker, load, --input, "/var/local/watchtower.tar.gz" ]
# Lightweight Python image / Simple HTTP Server
  - [ docker, load, --input, "/var/local/raspberrypi3-alpine-python.tar.gz" ]

# Launch the previous containers
  - [ docker-compose, --file, "/var/local/docker-compose.yml", up ]

# These commands will be run on every boot
bootcmd:
# Generate the unique duckiebot SSID on first boot, based on the MAC address, broadcast to random channel
  - 'iwconfig wlan0 power off'
