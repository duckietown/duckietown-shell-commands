#!/usr/bin/env bash

set -x

SD_DEVICE=/dev/mmcblk0
ROOT_PART_ID=2
DT_USER=duckie
DT_USER_PASSWORD=quackquack
DT_USER_ID=1000
SWAP_SIZE_MB=2048

setup_etc_hosts() {
cat >/etc/hosts <<EOL
127.0.0.1	localhost
127.0.0.1	$(cat /etc/hostname) $(cat /etc/hostname).local

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOL
}

run_on_first_boot () {
  echo "Setting up the robot for its first ever boot..."

  # setup /etc/hosts
  echo "Setting up the environment..."
  setup_etc_hosts

  # activate `booting` service
  cp /etc/avahi/services/dt.booting.service.disabled /etc/avahi/services/dt.booting.service

  # resize root partition
  resize2fs ${SD_DEVICE}p${ROOT_PART_ID}
  partprobe

  # sanitize files
  dt-sanitize-files

  # create duckie user
  adduser --uid ${DT_USER_ID} --gecos Duckietown --shell /bin/bash ${DT_USER}
  echo "${DT_USER}:${DT_USER_PASSWORD}" | chpasswd

  # remove HypriotOS prompt
  rm /home/${DT_USER}/.bash_prompt

  # sudo without a password
  echo "${DT_USER} ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers

  # setup ssh access
  echo "Setting up ssh..."
  mkdir -p /home/${DT_USER}/.ssh
  touch /home/${DT_USER}/.ssh/authorized_keys
  echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFiaiFeU0Pc3ZjiGbjJOIx28ghcWPoem8jU1OSeJnbTkKT79vrzjIbYjkBg7uBlXb6kLnbHLWHUnPlLk2IUQTxHHvakubEJkJxePdN6XO+q1sKpEvz+1GL60iBKhRljCZ9h/CcJ78kkyNQkexHT15ZDMhOnUd8c9zxwUHxSjzPSOH5ns8bxjU3oSjmzDEojPnQJmY6Evhf5DVcKXenxkzs4XgDEo+ldKo37i30iUoFCL30OsXCP2tPcn1j39qjL7vnaUBO9WqY8eOssOHAX7/K1dNN1lDvNCKspq/2f05Ss8LopSpe6hOiMnPB0RlotJbZn+784kV1B4nJpqLj+EQr DT2018key" | tee -a /home/${DT_USER}/.ssh/authorized_keys
  chmod 700 /home/${DT_USER}/.ssh
  chmod 600 /home/${DT_USER}/.ssh/authorized_keys
  chown -R ${DT_USER}:${DT_USER} /home/${DT_USER}/.ssh

  # setup docker
  echo "Adding the user to the groups..."
  adduser ${DT_USER} docker
  adduser ${DT_USER} users
  adduser ${DT_USER} video

  # make sure the user owns its folders
  echo "Changing the ownership of the user directories..."
  chown -R ${DT_USER_ID}:${DT_USER_ID} /data /code /home/${DT_USER}/

  # create swap
  echo "Setting up swap..."
  dd if=/dev/zero of=/swap0 bs=1M count=${SWAP_SIZE_MB}
  chmod 0600 /swap0
  mkswap /swap0
  echo "/swap0 swap swap" >> /etc/fstab
  swapon -a

  # store the MAC addresses for future reference
  echo "Storing debug information..."
  cp /proc/*info /data/proc
  cat /sys/class/net/eth0/address > /data/stats/MAC/eth0
  cat /sys/class/net/wlan0/address > /data/stats/MAC/wlan0

  while ! timeout --signal=INT 5s docker ps; do
    echo 'Waiting for Docker to start...'
    sleep 2
  done

  # run customizable first-boot script
  dt-init-first-boot

  # run containers
  echo "Setting up the containers..."
  dt-autoboot

  echo "Setting up completed!"
}

run_on_every_boot () {
  echo "Setting up the robot for this boot..."

  # activate `booting` service
  cp /etc/avahi/services/dt.booting.service.disabled /etc/avahi/services/dt.booting.service

  # setup /etc/hosts
  setup_etc_hosts

  # run customizable any-boot script
  dt-init-any-boot

  # remove `booting` service
  rm -f /etc/avahi/services/dt.booting.service

  echo "Setting up completed!"
}

FIRST_BOOT_EVIDENCE_FILE="/boot/dt.first.boot.evidence"
if test -f "$FIRST_BOOT_EVIDENCE_FILE"; then
  echo "$FIRST_BOOT_EVIDENCE_FILE exists so we assume this is not the first boot!"
  run_on_every_boot 2>&1 | tee /data/logs/this_boot_init.log
else
  echo "$FIRST_BOOT_EVIDENCE_FILE does not exist so we assume this is the first boot!"
  run_on_first_boot 2>&1 | tee /data/logs/first_boot_init.log
  touch "$FIRST_BOOT_EVIDENCE_FILE"
  reboot
fi

